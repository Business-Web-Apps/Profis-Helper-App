datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  addresses Address[]
  createdAt DateTime        @default(now())
  email     String          @unique
  firstName String?
  gender    EnumUserGender?
  id        String          @id @default(cuid())
  lastName  String?
  password  String
  payments  Payment[]
  roles     String[]
  updatedAt DateTime        @updatedAt
  username  String          @unique
}

model Address {
  addressType EnumAddressAddressType
  city        String
  country     String
  createdAt   DateTime               @default(now())
  housNum     String
  id          String                 @id @default(cuid())
  region      String
  streetName  String
  updatedAt   DateTime               @updatedAt
  user        User?                  @relation(fields: [userId], references: [id])
  userId      String?
}

model Job {
  createdAt         DateTime             @default(now())
  currentStatus     EnumJobCurrentStatus
  description       String
  endDate           DateTime?
  estimatedDuration Float
  id                String               @id @default(cuid())
  jobReports        JobReport[]
  jobType           JobType?             @relation(fields: [jobTypeId], references: [id])
  jobTypeId         String?
  numberOfHelper    Float
  paidAmount        Float?
  payments          Payment[]
  pricePerHour      Float
  startDate         DateTime
  title             String
  updatedAt         DateTime             @updatedAt
}

model JobType {
  createdAt    DateTime        @default(now())
  description  String
  id           String          @id @default(cuid())
  image        String?
  jobs         Job[]
  name         EnumJobTypeName
  pricePerHour Float
  updatedAt    DateTime        @updatedAt
}

model JobReport {
  createdAt   DateTime               @default(now())
  description String?
  id          String                 @id @default(cuid())
  job         Job?                   @relation(fields: [jobId], references: [id])
  jobId       String?
  jobStatus   EnumJobReportJobStatus
  title       String
  updatedAt   DateTime               @updatedAt
}

model Payment {
  amount    Float
  createdAt DateTime           @default(now())
  id        String             @id @default(cuid())
  job       Job                @relation(fields: [jobId], references: [id])
  jobId     String
  method    EnumPaymentMethod?
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id])
  userId    String
}

enum EnumUserGender {
  m
  f
  o
}

enum EnumAddressAddressType {
  invoice
  personal
  other
}

enum EnumJobCurrentStatus {
  submitted
  accepted
  applyable
  ready
  inProgress
  aborted
  interrupted
  done
  cancelled
}

enum EnumJobTypeName {
  move
  gardnening
  furnitureAssemby
}

enum EnumJobReportJobStatus {
  submitted
  accepted
  applyble
  ready
  inProgress
  aborted
  interrupted
  done
  cancelled
}

enum EnumPaymentMethod {
  bankTransfer
  creditCard
  Paypal
  other
}