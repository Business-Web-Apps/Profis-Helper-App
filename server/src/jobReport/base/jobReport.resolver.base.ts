/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateJobReportArgs } from "./CreateJobReportArgs";
import { UpdateJobReportArgs } from "./UpdateJobReportArgs";
import { DeleteJobReportArgs } from "./DeleteJobReportArgs";
import { JobReportFindManyArgs } from "./JobReportFindManyArgs";
import { JobReportFindUniqueArgs } from "./JobReportFindUniqueArgs";
import { JobReport } from "./JobReport";
import { Job } from "../../job/base/Job";
import { JobReportService } from "../jobReport.service";

@graphql.Resolver(() => JobReport)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class JobReportResolverBase {
  constructor(
    protected readonly service: JobReportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "JobReport",
    action: "read",
    possession: "any",
  })
  async _jobReportsMeta(
    @graphql.Args() args: JobReportFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [JobReport])
  @nestAccessControl.UseRoles({
    resource: "JobReport",
    action: "read",
    possession: "any",
  })
  async jobReports(
    @graphql.Args() args: JobReportFindManyArgs
  ): Promise<JobReport[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => JobReport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "JobReport",
    action: "read",
    possession: "own",
  })
  async jobReport(
    @graphql.Args() args: JobReportFindUniqueArgs
  ): Promise<JobReport | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobReport)
  @nestAccessControl.UseRoles({
    resource: "JobReport",
    action: "create",
    possession: "any",
  })
  async createJobReport(
    @graphql.Args() args: CreateJobReportArgs
  ): Promise<JobReport> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        job: args.data.job
          ? {
              connect: args.data.job,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobReport)
  @nestAccessControl.UseRoles({
    resource: "JobReport",
    action: "update",
    possession: "any",
  })
  async updateJobReport(
    @graphql.Args() args: UpdateJobReportArgs
  ): Promise<JobReport | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          job: args.data.job
            ? {
                connect: args.data.job,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobReport)
  @nestAccessControl.UseRoles({
    resource: "JobReport",
    action: "delete",
    possession: "any",
  })
  async deleteJobReport(
    @graphql.Args() args: DeleteJobReportArgs
  ): Promise<JobReport | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Job, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async job(@graphql.Parent() parent: JobReport): Promise<Job | null> {
    const result = await this.service.getJob(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
